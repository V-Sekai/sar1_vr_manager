[gd_scene load_steps=8 format=3 uid="uid://4r6ao13ste61"]

[ext_resource type="Script" path="res://addons/sar1_vr_manager/components/actions/vr_lasso_action.gd" id="1"]
[ext_resource type="Material" path="res://addons/sar1_vr_manager/materials/laser.tres" id="2"]
[ext_resource type="Material" path="res://addons/sar1_vr_manager/materials/curved_laser.tres" id="3"]

[sub_resource type="PlaneMesh" id="1"]
size = Vector2(0.05, 1)
subdivide_depth = 40

[sub_resource type="Shader" id="2"]
code = "shader_type spatial;
render_mode unshaded, cull_disabled, skip_vertex_transform, depth_test_disable;

uniform float width = 0.1;
uniform float height = 0.1;
uniform vec4 mix_color : hint_color;
uniform sampler2D main_texture : hint_albedo;

void vertex() {
	// vec3 down = vec3(0.0, -1.0 / ws, 0.0);
	
	// offset our Z so we're projecting from our origin point
	// VERTEX.z *= length; //right now the mesh goes from origin to -1 z
	// a = 0, 0, 0
	// b = 0, 0, -1
	// target = target
	// vec3 delta = target - vec3(0.0, 0.0, -1.0);
	// VERTEX = mix(VERTEX, target, -VERTEX.z * VERTEX.z * VERTEX.z);
	// VERTEX += delta * pow(abs(VERTEX.z), 2);
	float half_width = sign(VERTEX.x) * width / 2.0;
	float half_height = sign(VERTEX.y) * height / 2.0;
	VERTEX.x = 0.0;
	VERTEX.y = 0.0;

	// translate to our world vector
	VERTEX = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;
	
	// and apply our camera matrix
	VERTEX = (INV_CAMERA_MATRIX * vec4(VERTEX, 1.0)).xyz;
	vec3 obj_center = (WORLD_MATRIX * vec4(0,0,0,1)).xyz; // can break if multiple of these are combined into one mesh.
	vec3 camera_pos = (CAMERA_MATRIX * vec4(0,0,0,1)).xyz;
	float camera_distance = distance(camera_pos, obj_center);
	VERTEX += vec3(half_width * camera_distance, 0.0, 0.0);
	VERTEX += vec3(0.0, half_height * camera_distance, 0.0);
	
	//VERTEX *= camera_distance * 0.1;
}

void fragment() {
	vec4 col = texture(main_texture, vec2(UV.x, UV.y)).rgba;
	ALBEDO = col.rgb * mix_color.rgb;
	
	// need to fix up our image and add an alpha channel
	ALPHA = col.a * mix_color.a;
}
"

[sub_resource type="ShaderMaterial" id="3"]
render_priority = 127
shader = SubResource( "2" )

[sub_resource type="QuadMesh" id="4"]

[node name="snap_pointer" type="Node3D"]
script = ExtResource( "1" )
straight_laser = NodePath("straight_laser")
snapped_laser = NodePath("snap_laser")
primary_circle = NodePath("primary_snap_circle")
secondary_circle = NodePath("secondary_snap_circle")

[node name="straight_laser" type="MeshInstance3D" parent="."]
material_override = ExtResource( "2" )
cast_shadow = 0
extra_cull_margin = 16384.0
mesh = SubResource( "1" )
surface_material_override/0 = null
script = null

[node name="snap_laser" type="MeshInstance3D" parent="."]
material_override = ExtResource( "3" )
cast_shadow = 0
extra_cull_margin = 16384.0
mesh = SubResource( "1" )
surface_material_override/0 = null
script = null

[node name="primary_snap_circle" type="MeshInstance3D" parent="."]
material_override = SubResource( "3" )
cast_shadow = 0
mesh = SubResource( "4" )
surface_material_override/0 = null
script = null

[node name="secondary_snap_circle" type="MeshInstance3D" parent="."]
material_override = SubResource( "3" )
cast_shadow = 0
mesh = SubResource( "4" )
surface_material_override/0 = null
script = null
